#!/bin/bash

commit_regex='^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test)(\(.+\))?!?: .+'
error_msg="ERROR: Commit message does not follow the Conventional Commits format."

# Prevent empty commit messages.
if [ -z "$(cat "$1" | awk '{$1=$1};1')" ]; then
  echo "ERROR: Empty commit message, please provide a commit message." >&2
  exit 1
fi

# Check commit message format.
if ! grep -iqE "$commit_regex" "$1"; then
  echo "$error_msg" >&2
  exit 1
fi

# Check if the commit message is too long.
if [ "$(cat "$1" | wc -l)" -ne 1 ] || [ "$(cat "$1" | wc -c)" -gt 51 ]; then
  echo "ERROR: Commit message is too long (should be <= 50 chars in a single line)." >&2
  exit 1
fi

# Extract commit type and description.
commit_type=$(cat "$1" | cut -d ":" -f 1)
commit_desc=$(cat "$1" | cut -d ":" -f 2-)

entry=""

case "$commit_type" in
  feat)
    entry="\n- New Feature:${commit_desc}"
    ;;
  fix)
    entry="\n- Bug Fixes:${commit_desc}"
    ;;
  perf)
    entry="\n- Improvements:${commit_desc}"
    ;;
  docs)
    entry="\n- Documentation:${commit_desc}"
    ;;
  *)
    entry="\n- Other:${commit_desc}"
    ;;
esac

# Skip the entry for non-user impacting commits.
if [[ "$commit_type" =~ ^(chore|style|refactor|test|build)$ ]]; then
  exit 0
fi

# check if RELEASE.md exists and create if not
[ -e RELEASE.md ] || touch RELEASE.md

# insert at the top of the RELEASE.md file
printf '%s\n' "1i" "${entry}\n" "." w | ed -s RELEASE.md

# Amend the commit to include changes to RELEASE.md.
git add RELEASE.md
git commit --amend --no-edit
